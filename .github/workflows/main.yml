# This is a basic workflow to help you get started with Actions

name: Run TestProject OpenSDK Tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Configure JDK version
        uses: actions/setup-java@v1
        with:
          java-version: 15

      # Runs a single command using the runners shell
      - name: Run TestProject agent
        env:
          TP_API_KEY: ${{ secrets.TP_API_KEY }}
        run: |
          envsubst < .github/ci/docker-compose.yml > docker-compose.yml
          docker-compose -f docker-compose.yml up -d
        # Ensures that the TestProject agent is ready to run your tests.
      # The TestProject agent is ready to run tests after it has 
      # suggessfully registered itself to the TestProject platform.
      # See: https://github.com/marketplace/actions/wait-for-api-action
      - name: Sleep until the TestProject agent can run tests
        uses: mydea/action-wait-for-api@v1
        with:
          url: http://localhost:8585/api/status
          expected-response-field: registered
          expected-response-field-value: true
          interval: 1
          timeout: 60       
      # Runs the tests with Maven.     
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        env:
          # Ensures that the TestProject developer token is provided to TestProject OpenSDK
          # as an environment variable.
          TP_DEV_TOKEN: ${{secrets.TP_DEV_TOKEN}}
      - name: Execute Gradle build
        run: ./gradlew build
        working-directory: testproject
